generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE   @map("male")
  FEMALE @map("female")
}

enum Role {
  ADMINISTRATOR @map("administrator")
  GUEST         @map("guest")
  MEMBER        @map("member")
  OWNER         @map("owner")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String    @map("hashed_password")
  image          String?
  gender         Gender
  role           Role      @default(GUEST)
  bookings       Booking[]
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  @@index([email])
  @@map("users")
}

model RoomType {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(100)
  code        String    @unique @db.VarChar(20)
  description String?
  rooms       Room[]
  price       RoomPrice @relation(fields: [priceId], references: [id])
  priceId     String    @unique @map("price_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("room_types")
}

model RoomPrice {
  id        String    @id @default(uuid())
  weekday   Int // Price in subunit (e.g. satang for this project)
  weekend   Int // Price in subunit (e.g. satang for this project)
  type      RoomType?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("room_prices")
}

model Room {
  id        String    @id @default(uuid())
  name      String    @unique
  type      RoomType  @relation(fields: [typeId], references: [id])
  typeId    String    @map("type_id")
  bookings  Booking[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("rooms")
}

model Booking {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  room      Room      @relation(fields: [roomId], references: [id])
  roomId    String    @map("room_id")
  checkIn   DateTime  @map("check_in")
  checkOut  DateTime  @map("check_out")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("bookings")
}
