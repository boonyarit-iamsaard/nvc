generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  PENDING     @map("pending")
  CONFIRMED   @map("confirmed")
  CHECKED_IN  @map("checked_in")
  CHECKED_OUT @map("checked_out")
  CANCELLED   @map("cancelled")
  NO_SHOW     @map("no_show")
  ON_HOLD     @map("on_hold")
  EXPIRED     @map("expired")
}

enum BookingPaymentStatus {
  PENDING   @map("pending")
  PAID      @map("paid")
  FAILED    @map("failed")
  REFUNDED  @map("refunded")
  DISPUTED  @map("disputed")
  CANCELLED @map("cancelled")
}

enum Gender {
  MALE   @map("male")
  FEMALE @map("female")
}

enum Role {
  ADMINISTRATOR @map("administrator")
  GUEST         @map("guest")
  MEMBER        @map("member")
  OWNER         @map("owner")
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?        @map("email_verified")
  hashedPassword String           @map("hashed_password")
  image          String?
  gender         Gender
  role           Role             @default(GUEST)
  bookings       Booking[]
  memberships    UserMembership[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")

  @@index([email])
  @@map("users")
}

model RoomType {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(100)
  code        String    @unique @db.VarChar(20)
  description String?
  rooms       Room[]
  price       RoomPrice @relation(fields: [priceId], references: [id])
  priceId     String    @unique @map("price_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("room_types")
}

model RoomPrice {
  id        String    @id @default(uuid())
  weekday   Int // Price in subunit (e.g. satang for this project)
  weekend   Int // Price in subunit (e.g. satang for this project)
  type      RoomType?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("room_prices")
}

model Room {
  id        String    @id @default(uuid())
  name      String    @unique
  type      RoomType? @relation(fields: [typeId], references: [id], onDelete: SetNull)
  typeId    String?   @map("type_id")
  bookings  Booking[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("rooms")
}

model Booking {
  id                       String               @id @default(uuid())
  user                     User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                   String?              @map("user_id")
  room                     Room?                @relation(fields: [roomId], references: [id], onDelete: SetNull)
  roomId                   String?              @map("room_id")
  checkIn                  DateTime             @map("check_in")
  checkOut                 DateTime             @map("check_out")
  guestName                String               @map("guest_name")
  guestEmail               String               @map("guest_email")
  guestMembershipNumber    String?              @map("guest_membership_number")
  roomTypeName             String               @map("room_type_name")
  roomName                 String               @map("room_name")
  weekdayPriceAtBooking    Int                  @map("weekday_price_at_booking")
  weekendPriceAtBooking    Int                  @map("weekend_price_at_booking")
  totalAmount              Int                  @map("total_amount")
  discountAmount           Int                  @map("discount_amount")
  totalAmountAfterDiscount Int                  @map("total_amount_after_discount")
  bookingStatus            BookingStatus        @default(PENDING) @map("booking_status")
  paymentStatus            BookingPaymentStatus @default(PENDING) @map("payment_status")
  createdAt                DateTime             @default(now()) @map("created_at")
  updatedAt                DateTime             @updatedAt @map("updated_at")
  deletedAt                DateTime?            @map("deleted_at")

  @@map("bookings")
}

model Membership {
  id        String           @id @default(uuid())
  name      String           @unique
  code      String           @unique
  price     MembershipPrice  @relation(fields: [priceId], references: [id])
  priceId   String           @unique @map("price_id")
  users     UserMembership[]
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  deletedAt DateTime?        @map("deleted_at")

  @@map("memberships")
}

model MembershipPrice {
  id         String      @id @default(uuid())
  male       Int         @default(0) // Price in subunit (e.g. satang for this project) and 0 means not available
  female     Int         @default(0) // Price in subunit (e.g. satang for this project) and 0 means not available
  membership Membership?
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  deletedAt  DateTime?   @map("deleted_at")

  @@map("membership_prices")
}

model MembershipSequence {
  id                   String    @id @default(uuid())
  membershipCode       String    @unique @map("membership_code")
  lastAssignedSequence Int       @default(0) @map("last_assigned_sequence")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at")

  @@map("membership_sequences")
}

model UserMembership {
  id                       String      @id @default(uuid())
  user                     User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                   String?     @map("user_id")
  membership               Membership? @relation(fields: [membershipId], references: [id], onDelete: SetNull)
  membershipId             String?     @map("membership_id")
  membershipNumber         String?     @unique @map("membership_number")
  userName                 String?     @map("user_name") // Since user's name can be null, it should be nullable here
  userEmail                String      @map("user_email")
  userGender               Gender      @map("user_gender")
  membershipName           String      @map("membership_name")
  membershipPriceAtJoining Int         @map("membership_price_at_joining")
  startDate                DateTime    @map("start_date")
  endDate                  DateTime    @map("end_date")
  createdAt                DateTime    @default(now()) @map("created_at")
  updatedAt                DateTime    @updatedAt @map("updated_at")
  deletedAt                DateTime?   @map("deleted_at")

  @@map("user_memberships")
}
